Higher-Order Functions
----------------------

  Take functions as parameters and/or return functions as values.

  Curried Functions
  ----------------
    * A function that only takes 1 parameter and returns a function that takes
      the next parameter and so on until all the parameters are satisfied.
      Eg. 
		Int -> Int -> Int = Int -> (Int -> Int)
		max 4 5 or (max 4) 5
    * Every function in Haskell takes only 1 parameter.
    * Partial application is calling a function with too few parameters.
	  Eg. max 4
	* Functions can be thought of as tiny factories that take some materials 
	  and produce something else.
	
  Sections
  --------
    * Partially applied infix functions.
    * Surround the part of the infix function to section with (). 
      When the missing parameter is supplied the function is executed.
      Eg.	(/10) returns: Fractional -> Fractional
            (/10) 200 = 20.0
    * When partially applying subtraction use the subtract function instead of the
      - operator as that will just negate the section value.
      Eg. (-4) is not a sectioned subtraction, use (subtract 4) instead.
  
  Printing Functions
  ------------------
    * Functions don't implement Show and therefore can't be printed.

  Some Higher-Orderism Is in Order
  --------------------------------
   * Functions that take and/or return functions
     Eg. 
        applyTwice :: (a -> a) -> a -> a
        applyTwice f x = f (f x)
   * zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
   * flip :: (a -> b -> c) -> (b -> a -> c)
   
  The Functional Programmer's Toolbox
  -----------------------------------
    * map :: (a -> b) -> [a] -> [b]
    * filter :: (a -> Bool) -> [a] -> [a]

	* takeWhile (a-> Bool) -> [a] -> [a]
		Takes a predicate and a list and returns elements of the list as long as the predicate holds true. If the predicate returns false the function stops.
		
  Mapping Functions with Multiple Parameters
  ------------------------------------------
	* Passing in functions with more than a single parameter to map results in partial application of that function.
	Eg.  zipWith ($) (map (*) [1..5]) [100,200..500] = [100,400,900,1600,2500]
	* Partial application is also known as "eta reduction".
  Lambdas
  -------
   * Anonymous functions (functions without a name)
   * Used when we need a function only once
   * Function is defined inline.
   * To create a lambda use:
     (\a b c -> function_body)
   * Usually surrounded by parentheses.
   * They are expressions.
   * Partial application and lambdas can be used for similar situations
     Eg. map (+) [1..5] and map (\x -> x + 5) [1..5]
   * Partial application is considered more readable.
   * Allows pattern matching but does not allow for several patterns for the same parameter.
   * If a pattern match fails, a runtime error occurs. (seemed to be compile time.)
   * If you write lambdas without parenthesis, it assumes that everything to the right of the -> belongs to it.

  I Fold You So
  -------------
   * A reduction of a data structure to a single value.
   * fold takes a binary function, a starting value and a list.
   * Returns the starting value when called with an empty list.
 
  Left Folds with foldl
  ---------------------
   * foldl :: (a -> b -> a) -> a -> [b] -> a
   * Runs the supplied function from left to right on the list
   * Sum definition:
     sum' :: (Num a) => [a] -> a
     sum' xs = foldl (+) 0 xs
     
	 because we have currying we can do:
     sum' = foldl (+) 0 //point-free style
   * Does not work on infinite lists.
   * foldl (f) v [x0...xn] = ((((v f x0) f x1) f x2) .... f xn)
   * given a list, replace all the : with f ->
    foldl (f) v [1..4] = ((((v f 1) f 2) f 3) f 4)


  Right Folds with foldr
  ----------------------
   * foldr :: (a -> b -> b) -> b -> [a] -> b
   * The accumulator works from right to left.
   * The order of parameters is reversed.
   * ++ is slower than :, so with list manipulation, foldr is preferred.
   * Work on infinite lists (sometimes).
   * foldr (f) v [x0...xn] = x0 f (x1 f (x2 f.... (xn f v)))
   * given a list, replace all the : with f ->
    foldr (f) v [1..4] = (1 f (2 f (3 f (4 f v))))
 
  foldl1 and foldr1 functions
  ---------------------------
   * foldl1/foldr1 :: (a -> a -> a) -> [a] -> a
   * Similar to foldl and foldr
   * Don't take an accumulator value
   * Accumulator value is derived from the first element for foldl1 and the last element for foldr1 respectively.
   * Both functions throw exceptions when called with an empty list.

  Another Way to Look at Folds
  ----------------------------
   * Given a list o [3,4,5,6]:
		foldr =   f 3 (f 4 (f 5 (f 6 acc)))
		foldl =  f (f (f (f z 3) 4) 5) 6
   * Reversing a list with flip:
		flip (:) (flip (:) (flip (:) (flip (:) [] 3) 4) 5) 6

  Folding Infinite Lists
  -----------------------
   * foldr sometimes works on infinite lists (not always).
     Eg. and (repeat False)
   * Short circuit operators like && only evaluate the RHS expression only if the LHS expression is True. This coupled with Haskell's laziness allow foldr to work on infinite lists.
   * foldr will work on infinite lists when used with a binary function that does not need to evaluate its second parameter, all the way through to give back an answer.
  
  Scans
  -----
   * scanl and scanr are similar to foldl and foldr but store intermediate results
   * for scanl the last value is the result while for scanr the first value is the result.
   * for scanl the first intermediate value the accumulator while for scanr the last value is the accumulator.
   * How many elements does it take for the sum of the square roots of all natural numbers to exceed 1000?

  Function Application with $
  ---------------------------
   * $ :: (a -> b) -> a -> b
   * has the lowest precedence (0)
   * contrasts with normal function application with spaces which has a high precedence.
     (?)
   * Normal function application is left associative.
     Eg. f a b c = (((f a) b) c)
   * $ function application is right associative.
   * What is it good for? Writing cleaner expressions with fewer parentheses.
     Eg. sum (map sqrt [1..130]) == sum $ map sqrt [1..130]
     Since $ is of lower precedence and right associative, map sqrt is executed first 
      and then supplied to sum.
   * You can imagine $ as being equivalent to writing an opening parenthesis and and a closing one at the far right of the expression on the right.
     Eg. sqrt 3+4+9 = 14.73
         sqrt (3+4+9) = 4.0
         sqrt $ 3+4+9 = 4.0

         sum (filter (>10) (map (*2) [2..10])) ==
         sum $ filter (>10) (map (*2) [2..10]) ==
		 sum $ filter (>10) $ map (*2) [2..10] ==
   * Allows us to treat function application as just another function.
 	 Eg. map ($ 3) [(4+), (10*), (^2), sqrt]
         :t ($) ==   (a -> b) -> a -> b
         when you supply a, b is returned:
         :t ($ 3) == (a -> b) -> b

  Function Composition
  --------------------
  * Function composition is defined as (f.g)(x) = f(g(x)).
  * Composing two functions is the equivalent of calling one function with some value and
    then calling another function with the result of the first function.
  * Function composition is right associative
  * negate . (*3) = multiply a number by 3 and then negate the resulting number.
  * Say we want to negate a list of numbers:
    map negate $ map abs [1, 2, -3, 4, -5, -6, 7]
    map (\x -> negate $ abs x) [1, 2, -3, 4, -5, -6, 7]
	map (\x -> negate (abs x)) [1, 2, -3, 4, -5, -6, 7]

	negate (abs x) == f (g x)
	
	Therefore we can write:

    map (negate . abs) [1, 2, -3, 4, -5, -6, 7]
  * map (\xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]] ==
     map (negate . sum . tail) [[1..5],[3..6],[1..7]]  

  Function Composition with Multiple Parameters
  --------------------------------------------- 
    * Apply them partially so that each function takes only 1 parameter.
      sum (replicate 5 (max 6.7 8.9))
      (sum . replicate 5) (max 6.7 8.9)
      (sum . replicate 5) $ max 6.7 8.9
    * Steps:
       1. Write the inner most function and its parameters
       2. Add a $ in front of it
       3. Compose all functions that came before without their last parameter.
	 Eg. replicate 2 (product (map (*3) (zipWith max [1,2] [4,5]))) ==
		replicate 2 . product . map (*3) $ zipWith max [1,2] [4,5]
 
  Point-Free Style
  ----------------
  * reducing duplicate variables from either side of an implementation.
    Eg. sum' :: (Num a) => [a] -> [a]
        sum xs = foldl (+) 0 xs
			or
	    sum = foldl (+) 0

Things of Interest
------------------
 * When to use map versus for comprehension?
 * The following definitions are the same:
	addThree :: Int -> Int -> Int -> Int
	addThree = \x -> \y -> \z -> x + y + z

	addThree' :: Int -> Int -> Int -> Int
	addThree' = \x y z -> x + y + z

	addThree'' :: Int -> Int -> Int -> Int
	addThree'' x y z = x + y + z
 * Page 73: map (flip subtract 20) [1..4], what is the associativity here?
 * Although you can use foldr on infinite lists, you can still blow the stack if used incorrectly. There has to be a clause that limits the infiniteness of the list - like take.
 * Why doesn't this work on infinite lists:
   or'' :: [Bool] -> Bool
   or'' = foldr (||) False

   but this does:	
   or'' (True : (repeat False))

   takeWhile (odd) $ scanr (+) 20 [1..] (does not work)
 * Function composition patterns are easier to see when using parentheses as opposed to the $ function.
 * Point-free and $
	fn x = ceiling (negate (tan (cos (max 50 x)))) ==
		fn' = ceiling . negate . tan . cos . max 50 /=
		fn'' ceiling $ negate $ tan $ cos $ max 50 (does not work)
		
		why?
		
		(.) :: (b -> c) -> (a -> b) -> a -> c (works with functions using currying)
 		($) :: (a -> b) -> a -> b (takes in a direct value of a)

        Because ($) needs a value as per definition and there will only compile without a partial function:
		fn'' ceiling $ negate $ tan $ cos $ max 50 60 (will work.)
  * How does this compile? curry id/uncurry id?
  * How does takeWhile temper an infinite list with foldr?
  * Partial application is also known as "eta reduction".
  * filter (\a -> fst a > 10) $ zip [5..20] ['a'..'z'] can be reduced:
		filter ((>10) . fst) zip [5..20] ['a'..'z']

Questions
---------

1. Without looking in prelude define the higher-order library function "curry" that converts a function on pairs into a curried function, and, conversely, the function uncurry that converts curried function with two arguments into a function on pairs.

When would you use these functions?

(currying)

2. Rewrite [f x | x <- xs, p x] using map and filter

(map, filter)

3. Implement the following functions using what you have learnt in the chapter. Try to make them as short and readable as possible.

length' :: [b] -> Integer
append' :: [a] -> [a] -> [a]
flatten' :: [[a]] -> [a]
flatmap' :: (a -> [b]) -> [a] -> [b]

(everything!)

4. Using folds, define a function

dec2nat :: [Int ] -> Int 

that converts a decimal number into a natural number
	eg. dec2nat [2, 3, 4, 5] = 2345

(foldl, lambdas)

5. Rewrite this simple fibonacci function using scans

fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

(hint: infinite lists and recursion)

6. Convert the following to point free style:

	f x = 5 + 8/x

7. Express fst & snd using curry or uncurry and other Prelude functions (don't use lambdas)

Answers
-------

1.
curry' :: ((a,b) -> c) -> a -> b -> c
curry' f = \x -> \y -> f (x,y)

Used to pass a function that takes a tuple into a function that takes a single arg.

uncurry' :: (a -> b -> c) -> (a,b) -> c
uncurry' f (x, y) = f x y

Used to pass a function that takes a  2 args into a function that takes a tuple.

2.
mapWithFilter :: (a-> b) -> (a->Bool) -> [a] -> [b]
mapWithFilter f p xs = map f (filter p xs)

3.

length' :: [a] -> Integer
length' = foldl (\a _ -> a + 1) 0

//++
append' :: [a] -> [a] -> [a]
append' xs ys = foldr (:) ys xs


//concat
flatten' :: [[a]] -> [a] 
flatten' = foldr (\b a -> foldr (:) a b) []

flatten'' :: [[a]] -> [a]
flatten'' xxs = [x | xs <- xxs, x <- xs]


//concatMap
flatMap' :: (a -> [b]) -> [a] -> [b]
flatMap' f xs = flatten' $ map f xs

4.
dec2nat :: [Int] -> Int
dec2nat [] = 0
dec2nat xs = read (foldl (\a v -> a ++ show v) "" xs)

5.
fib' :: Integer -> Integer
fib' n
 | n == 0 = 0
 | n == 1 = 1
fib' n =  last $ scanl1 (\a b -> fib' (b - 1) + fib' (b - 2)) [2..n]

6.
fivePlusEightBy x = (8/x) + 5

7.

ref:http://www.reddit.com/r/haskell/comments/l4gst/can_someone_write_the_solution_for_the_exercises/

fst' :: (a,b) -> a
fst' = uncurry const

snd' :: (a, b) -> b
snd' = uncurry $ flip const

Asides
------
